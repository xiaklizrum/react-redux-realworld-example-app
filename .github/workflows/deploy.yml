name: Build and Deploy

on:
  push:
    branches: [master]

  # специальное событие, которое происходит при ручном вызове workflow
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      # указываем action, который будет запущен как часть job
      # В текущем случае это клонирование репозитория
      - uses: actions/checkout@v2
      # Кеширование npm
      - name: Cache dependencies
        # включаем специальный action
        uses: actions/cache@v2
        # передаем параметры
        with:
          # что кешировать (путь)
          path: ~/.npm
          # ключ кеширования (хеш)
          key: npm-${{ hashFiles('package-lock.json') }}
          # ключ для восстановления кеша
          restore-keys: npm-
      - name: Install dependencies
        run: npm ci --ignore-scripts
      # Запуск сборки
      - name: Build
        run: npm run build
        env:
          REACT_APP_BACKEND_URL: ${{ secrets.API_URL }}
      # Дальше по аналогии с backend, просто загружаем на сервер
      - name: Setup SSH
        run: |
          # создаем директорию для ключа
          mkdir -p ~/.ssh
          # выводим содержимое нашей переменной окружения в файл
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          # ставим нужные безопасные права
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/id_rsa
          # Добавляем отпечаток сервера
          echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
      - name: Copy files to the server
        run: |
          # воспользуемся SCP здесь, т.к. нам просто нужно загрузить из
          # одной директории
          ssh $SSH_USER@$SSH_HOST "mkdir -p ~/realworld/public"
          scp -r build/* $SSH_USER@$SSH_HOST:~/realworld/public
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
